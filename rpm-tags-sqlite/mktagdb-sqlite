#!/usr/bin/python3
#
# Generate a sqlite DB of fake tagged file objects
# THIS IS ONLY AN EXPERIMENT
#

import os
import dnf
import argparse
import tempfile
import sqlite3
import pprint
import rpm
from binascii import hexlify
from hashlib import sha256
from datetime import datetime

def setup_argparse():
    parser = argparse.ArgumentParser(description="Generate repo stats")

    parser.add_argument("-r", "--release", help="release information", default=None, metavar="STRING")
    parser.add_argument("-s", "--source", help="source repository (may be listed multiple times)",
                        metavar="REPOSITORY", action="append", default=[])
    parser.add_argument("--tempdir", help="Directory to store temporary DNF files")
    return parser


def get_dbo(tempdir, repositories):
    """ Create a dnf Base object and setup the repositories and installroot

        :param list repositories: List of repositories to use for the installation
        :param string releasever: Release version to pass to dnf

    """
    def sanitize_repo(repo):
        """Convert bare paths to file:/// URIs, and silently reject protocols unhandled by dnf"""
        if repo.startswith("/"):
            return "file://{0}".format(repo)
        elif any(repo.startswith(p) for p in ('http://', 'https://', 'ftp://', 'file://')):
            return repo
        else:
            return None

    # sanitize the repositories
    repositories = list(sanitize_repo(r) for r in repositories)

    # remove invalid repositories
    repositories = list(r for r in repositories if r)

    cachedir = os.path.join(tempdir, "dnf.cache")
    if not os.path.isdir(cachedir):
        os.mkdir(cachedir)

    logdir = os.path.join(tempdir, "dnf.logs")
    if not os.path.isdir(logdir):
        os.mkdir(logdir)

    dnfbase = dnf.Base()
    conf = dnfbase.conf

    # setup dirs.
    conf.logdir = logdir
    conf.cachedir = cachedir

    # Turn off logging to the console
    conf.debuglevel = 10
    conf.errorlevel = 0

    # add the repositories
    for i, r in enumerate(repositories):
        if "SRPM" in r or "srpm" in r:
            print("Skipping source repo: %s" % r)
            continue
        repo_name = "stats-repo-%d" % i
        repo = dnf.repo.Repo(repo_name, cachedir)
        repo.baseurl = [r]
        repo.skip_if_unavailable = False
        repo.enable()
        dnfbase.repos.add(repo)
        print("Added '%s': %s" % (repo_name, r))
        print("Fetching metadata...")
        try:
            repo.load()
        except dnf.exceptions.RepoError as e:
            print("Error fetching metadata for %s: %s" % (repo_name, e))
            return None

    if not repositories:
        print("Using local system repos")
        dnfbase.read_all_repos()

    dnfbase.fill_sack(load_system_repo=not repositories)
    dnfbase.read_comps()

    return dnfbase


class DbSchema(object):
    """
    Database schema creation and modification
    """

    # Schema revisions, rev[0], etc. is a list of SQL operations to run to
    # bring the database up to date.
    sql = ["""  create table tags(id INTEGER PRIMARY KEY, tag, value, type, item);
                create index tags_index on tags(tag, value, item);

                create table schema(version);
                insert into schema(version) values(1);
            """,
          ]

    def __init__(self, database):
        self.database = database

    def upgrade(self):
        """
        Upgrade the database to the current schema version
        """
        # Get the current schema version number
        conn = sqlite3.connect(self.database)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        try:
            cur.execute("select version from schema")
            version = cur.fetchone()['version']
        except:
            version = 0

        if len(self.sql) > version:
            for update in self.sql[version:]:
                cur.executescript(update)
        cur.close()
        conn.close()


# Size of RPM tag types in bytes
TAG_TYPE_SIZES = {
    "RPM_NULL_TYPE": 0,
    "RPM_CHAR_TYPE": 1,
    "RPM_INT8_TYPE": 1,
    "RPM_INT16_TYPE": 2,
    "RPM_INT32_TYPE": 4,
    "RPM_INT64_TYPE": 8,
    "RPM_STRING_TYPE": 1,
    "RPM_BIN_TYPE": 1,
    "RPM_STRING_ARRAY_TYPE": 1,
    "RPM_I18NSTRING_TYPE": 2,
}
TAG_ARRAY_TYPES = ["RPM_STRING_TYPE", "RPM_BIN_TYPE", "RPM_STRING_ARRAY_TYPE", "RPM_I18NSTRING_TYPE"]
TAG_TYPES = {
    "RPMTAG_ARCH": "RPM_STRING_TYPE",
    "RPMTAG_ARCHIVESIZE": "RPM_INT32_TYPE",
    "RPMTAG_BASENAMES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_BUGURL": "RPM_STRING_TYPE",
    "RPMTAG_BUILDARCHS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_BUILDHOST": "RPM_STRING_TYPE",
    "RPMTAG_BUILDTIME": "RPM_INT32_TYPE",
    "RPMTAG_C": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_CHANGELOGNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_CHANGELOGTEXT": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_CHANGELOGTIME": "RPM_INT32_TYPE",
    "RPMTAG_CLASSDICT": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_CONFLICTFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_CONFLICTNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_CONFLICTNEVRS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_CONFLICTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_CONFLICTVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_COOKIE": "RPM_STRING_TYPE",
    "RPMTAG_DBINSTANCE": "RPM_INT32_TYPE",
    "RPMTAG_DEPENDSDICT": "RPM_INT32_TYPE",
    "RPMTAG_DESCRIPTION": "RPM_I18NSTRING_TYPE",
    "RPMTAG_DIRINDEXES": "RPM_INT32_TYPE",
    "RPMTAG_DIRNAMES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_DISTRIBUTION": "RPM_STRING_TYPE",
    "RPMTAG_DISTTAG": "RPM_STRING_TYPE",
    "RPMTAG_DISTURL": "RPM_STRING_TYPE",
    "RPMTAG_DSAHEADER": "RPM_BIN_TYPE",
    "RPMTAG_E": "RPM_INT32_TYPE",
    "RPMTAG_ENCODING": "RPM_STRING_TYPE",
    "RPMTAG_ENHANCEFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_ENHANCENAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_ENHANCENEVRS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_ENHANCES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_ENHANCEVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_EPOCH": "RPM_INT32_TYPE",
    "RPMTAG_EPOCHNUM": "RPM_INT32_TYPE",
    "RPMTAG_EVR": "RPM_STRING_TYPE",
    "RPMTAG_EXCLUDEARCH": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_EXCLUDEOS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_EXCLUSIVEARCH": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_EXCLUSIVEOS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILECAPS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILECLASS": "RPM_INT32_TYPE",
    "RPMTAG_FILECOLORS": "RPM_INT32_TYPE",
    "RPMTAG_FILECONTEXTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILEDEPENDSN": "RPM_INT32_TYPE",
    "RPMTAG_FILEDEPENDSX": "RPM_INT32_TYPE",
    "RPMTAG_FILEDEVICES": "RPM_INT32_TYPE",
    "RPMTAG_FILEDIGESTALGO": "RPM_INT32_TYPE",
    "RPMTAG_FILEDIGESTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILEFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_FILEGROUPNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILEINODES": "RPM_INT32_TYPE",
    "RPMTAG_FILELANGS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILELINKTOS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILEMD5S": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILEMODES": "RPM_INT16_TYPE",
    "RPMTAG_FILEMTIMES": "RPM_INT32_TYPE",
    "RPMTAG_FILENAMES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILENLINKS": "RPM_INT32_TYPE",
    "RPMTAG_FILEPROVIDE": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILERDEVS": "RPM_INT16_TYPE",
    "RPMTAG_FILEREQUIRE": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILESIGNATURELENGTH": "RPM_INT32_TYPE",
    "RPMTAG_FILESIGNATURES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILESIZES": "RPM_INT32_TYPE",
    "RPMTAG_FILESTATES": "RPM_CHAR_TYPE",
    "RPMTAG_FILETRIGGERCONDS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILETRIGGERFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_FILETRIGGERINDEX": "RPM_INT32_TYPE",
    "RPMTAG_FILETRIGGERNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILETRIGGERPRIORITIES": "RPM_INT32_TYPE",
    "RPMTAG_FILETRIGGERSCRIPTFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_FILETRIGGERSCRIPTPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILETRIGGERSCRIPTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILETRIGGERTYPE": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILETRIGGERVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILEUSERNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_FILEVERIFYFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_FSCONTEXTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_GIF": "RPM_BIN_TYPE",
    "RPMTAG_GROUP": "RPM_I18NSTRING_TYPE",
    "RPMTAG_HDRID": "RPM_STRING_TYPE",
    "RPMTAG_HEADERCOLOR": "RPM_INT32_TYPE",
    "RPMTAG_HEADERI18NTABLE": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_HEADERIMAGE": "RPM_NULL_TYPE",
    "RPMTAG_HEADERIMMUTABLE": "RPM_NULL_TYPE",
    "RPMTAG_HEADERREGIONS": "RPM_NULL_TYPE",
    "RPMTAG_HEADERSIGNATURES": "RPM_NULL_TYPE",
    "RPMTAG_ICON": "RPM_BIN_TYPE",
    "RPMTAG_INSTALLCOLOR": "RPM_INT32_TYPE",
    "RPMTAG_INSTALLTID": "RPM_INT32_TYPE",
    "RPMTAG_INSTALLTIME": "RPM_INT32_TYPE",
    "RPMTAG_INSTFILENAMES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_INSTPREFIXES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_LICENSE": "RPM_STRING_TYPE",
    "RPMTAG_LONGARCHIVESIZE": "RPM_INT64_TYPE",
    "RPMTAG_LONGFILESIZES": "RPM_INT64_TYPE",
    "RPMTAG_LONGSIGSIZE": "RPM_INT64_TYPE",
    "RPMTAG_LONGSIZE": "RPM_INT64_TYPE",
    "RPMTAG_NAME": "RPM_STRING_TYPE",
    "RPMTAG_NEVRA": "RPM_STRING_TYPE",
    "RPMTAG_NEVR": "RPM_STRING_TYPE",
    "RPMTAG_N": "RPM_STRING_TYPE",
    "RPMTAG_NOPATCH": "RPM_INT32_TYPE",
    "RPMTAG_NOSOURCE": "RPM_INT32_TYPE",
    "RPMTAG_NVRA": "RPM_STRING_TYPE",
    "RPMTAG_NVR": "RPM_STRING_TYPE",
    "RPMTAG_OBSOLETEFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_OBSOLETENAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OBSOLETENEVRS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OBSOLETES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OBSOLETEVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OLDENHANCESFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_OLDENHANCESNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OLDENHANCES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OLDENHANCESVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OLDFILENAMES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OLDSUGGESTSFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_OLDSUGGESTSNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OLDSUGGESTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OLDSUGGESTSVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_O": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OPTFLAGS": "RPM_STRING_TYPE",
    "RPMTAG_ORDERFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_ORDERNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_ORDERVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_ORIGBASENAMES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_ORIGDIRINDEXES": "RPM_INT32_TYPE",
    "RPMTAG_ORIGDIRNAMES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_ORIGFILENAMES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_OS": "RPM_STRING_TYPE",
    "RPMTAG_PACKAGER": "RPM_STRING_TYPE",
    "RPMTAG_PATCHESFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_PATCHESNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PATCHESVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PATCH": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PAYLOADCOMPRESSOR": "RPM_STRING_TYPE",
    "RPMTAG_PAYLOADFLAGS": "RPM_STRING_TYPE",
    "RPMTAG_PAYLOADFORMAT": "RPM_STRING_TYPE",
    "RPMTAG_PKGID": "RPM_BIN_TYPE",
    "RPMTAG_PLATFORM": "RPM_STRING_TYPE",
    "RPMTAG_POLICIES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_POLICYFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_POLICYNAMES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_POLICYTYPESINDEXES": "RPM_INT32_TYPE",
    "RPMTAG_POLICYTYPES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_POSTINFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_POSTIN": "RPM_STRING_TYPE",
    "RPMTAG_POSTINPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_POSTTRANSFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_POSTTRANS": "RPM_STRING_TYPE",
    "RPMTAG_POSTTRANSPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_POSTUNFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_POSTUN": "RPM_STRING_TYPE",
    "RPMTAG_POSTUNPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_P": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PREFIXES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PREINFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_PREIN": "RPM_STRING_TYPE",
    "RPMTAG_PREINPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PRETRANSFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_PRETRANS": "RPM_STRING_TYPE",
    "RPMTAG_PRETRANSPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PREUNFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_PREUN": "RPM_STRING_TYPE",
    "RPMTAG_PREUNPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PROVIDEFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_PROVIDENAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PROVIDENEVRS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PROVIDES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PROVIDEVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_PUBKEYS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_RECOMMENDFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_RECOMMENDNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_RECOMMENDNEVRS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_RECOMMENDS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_RECOMMENDVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_RECONTEXTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_RELEASE": "RPM_STRING_TYPE",
    "RPMTAG_REMOVETID": "RPM_INT32_TYPE",
    "RPMTAG_REQUIREFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_REQUIRENAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_REQUIRENEVRS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_REQUIRES": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_REQUIREVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_RPMVERSION": "RPM_STRING_TYPE",
    "RPMTAG_R": "RPM_STRING_TYPE",
    "RPMTAG_RSAHEADER": "RPM_BIN_TYPE",
    "RPMTAG_SHA1HEADER": "RPM_STRING_TYPE",
    "RPMTAG_SIGGPG": "RPM_BIN_TYPE",
    "RPMTAG_SIGMD5": "RPM_BIN_TYPE",
    "RPMTAG_SIGPGP": "RPM_BIN_TYPE",
    "RPMTAG_SIGSIZE": "RPM_INT32_TYPE",
    "RPMTAG_SIZE": "RPM_INT32_TYPE",
    "RPMTAG_SOURCEPACKAGE": "RPM_INT32_TYPE",
    "RPMTAG_SOURCEPKGID": "RPM_BIN_TYPE",
    "RPMTAG_SOURCERPM": "RPM_STRING_TYPE",
    "RPMTAG_SOURCE": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_SUGGESTFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_SUGGESTNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_SUGGESTNEVRS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_SUGGESTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_SUGGESTVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_SUMMARY": "RPM_I18NSTRING_TYPE",
    "RPMTAG_SUPPLEMENTFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_SUPPLEMENTNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_SUPPLEMENTNEVRS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_SUPPLEMENTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_SUPPLEMENTVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRANSFILETRIGGERCONDS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRANSFILETRIGGERFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_TRANSFILETRIGGERINDEX": "RPM_INT32_TYPE",
    "RPMTAG_TRANSFILETRIGGERNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRANSFILETRIGGERPRIORITIES": "RPM_INT32_TYPE",
    "RPMTAG_TRANSFILETRIGGERSCRIPTFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_TRANSFILETRIGGERSCRIPTPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRANSFILETRIGGERSCRIPTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRANSFILETRIGGERTYPE": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRANSFILETRIGGERVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRIGGERCONDS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRIGGERFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_TRIGGERINDEX": "RPM_INT32_TYPE",
    "RPMTAG_TRIGGERNAME": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRIGGERSCRIPTFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_TRIGGERSCRIPTPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRIGGERSCRIPTS": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRIGGERTYPE": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_TRIGGERVERSION": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_URL": "RPM_STRING_TYPE",
    "RPMTAG_VCS": "RPM_STRING_TYPE",
    "RPMTAG_VENDOR": "RPM_STRING_TYPE",
    "RPMTAG_VERBOSE": "RPM_INT32_TYPE",
    "RPMTAG_VERIFYSCRIPTFLAGS": "RPM_INT32_TYPE",
    "RPMTAG_VERIFYSCRIPTPROG": "RPM_STRING_ARRAY_TYPE",
    "RPMTAG_VERIFYSCRIPT": "RPM_STRING_TYPE",
    "RPMTAG_VERSION": "RPM_STRING_TYPE",
    "RPMTAG_V": "RPM_STRING_TYPE",
    "RPMTAG_XPM": "RPM_BIN_TYPE",
}

def rpm_type(tag_name):
    """Return the RPM type name string"""
    return TAG_TYPES.get("RPMTAG_"+tag_name, "RPM_NULL_TYPE")

def rpm_type_size(tag_name, tag_data):
    """Return the size of the data, in bytes"""
    if not isinstance(tag_data, list):
        tag_data = [tag_data]

    tag_type = rpm_type(tag_name)
    total_bytes = 0
    for i in tag_data:
        if tag_type in TAG_ARRAY_TYPES:
            total_bytes += len(i) * TAG_TYPE_SIZES.get(tag_type, 0)
        else:
            total_bytes += TAG_TYPE_SIZES.get(tag_type, 0)
    return total_bytes

def guess_tags_from_path(path):
    """Return a list of (tag, value) tuples"""
    COMPONENTS = {"/etc/"   : "etc",
                  "/lib/"   : "lib",
                  "/lib64/" : "lib64",
                  "/man"    : "manpage",
                  "/share/" : "share",
                  "/doc/"   : "docs",
                  "/bin/"   : "binary",
                  "/sbin"   : "binary"}

    # Guess at FILETYPE tags
    tags = []
    for c in COMPONENTS:
        if c in path:
            tags.append(("FILETYPE", COMPONENTS[c]))

    return tags


def create_sqlite_db(base, db, gather_stats=True):
    """Create the sqlite db from the repo data"""

    conn = sqlite3.connect(db)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()

    # Gather statistics about the tags used in the rpms
    # key: RPMTAG_* name string
    # value: Dict of { count, total_data, type }
    tag_stats = {}

    for pkg in sorted(base.sack.query().available()):
        print("%s-%s.%s %s" % (pkg.name, pkg.evr, pkg.arch, len(pkg.files)))

        # Simple tag attributes
        PKG_TAGS = ("arch", "buildtime", "description", "downloadsize", "evr", "installsize",
                    "installtime", "license", "name", "packager", "size", "sourcerpm", "summary",
                    "url")
        # Insert tags on the package itself, using it's checksum as the item.
        pkg_chksum = hexlify(pkg.chksum[1]).decode()
        sql = "insert into tags(tag, value, type, item) values (?, ?, ?, ?)"
        for tag in PKG_TAGS:
            try:
                cur.execute(sql, (tag, getattr(pkg, tag, ""), "package", pkg_chksum))
            except sqlite3.Error as e:
                print("Error inserting pkg tags: %s" % e)

        # Other interesting things:
        #  .conflicts
        #  .enhances
        #  .obsoletes
        #  .provides
        #  .recommends
        #  .requires
        #  .suggests
        #  .supplements

        # Insert tags for all the files from this package
        for f in pkg.files:
            file_chksum = sha256(f.encode()).hexdigest()
            try:
                cur.execute(sql, ("PACKAGE", pkg_chksum, "file", file_chksum))
            except sqlite3.Error as e:
                print("Error inserting file tags: %s" % e)

            tags = [("PATH", f)] + guess_tags_from_path(f)
            if "-devel" in pkg.name:
                tags.append(("FILETYPE", "devel"))
            for tag, value in tags:
                try:
                    cur.execute(sql, (tag, value, "file", file_chksum))
                except sqlite3.Error as e:
                    print("Error inserting file tags: %s" % e)

        if not gather_stats:
            continue

        for tag in pkg.header.keys():
            tag_name = rpm.tagnames[tag]
            tag_data = pkg.header[tag]

            if isinstance(tag_data, list):
                count = len(tag_data)
                try:
                    tag_type = "List of %s" % rpm_type(tag_name)
                except IndexError:
                    tag_type = None
                tag_size = rpm_type_size(tag_name, tag_data)
            else:
                count = 1
                tag_type = rpm_type(tag_name)
                tag_size = rpm_type_size(tag_name, tag_data)

            if tag_name not in tag_stats:
                tag_stats[tag_name] = { "count": count, "total": tag_size, "type": tag_type }
            else:
                tag_stats[tag_name]["count"] += count
                tag_stats[tag_name]["total"] += tag_size

                # Update type if there was no initial data
                if tag_type and tag_stats[tag_name]["type"] is None:
                    tag_stats[tag_name]["type"] = tag_type

    conn.commit()
    cur.close()
    conn.close()

    if gather_stats:
        return tag_stats
    else:
        return {}


if __name__ == "__main__":
    parser = setup_argparse()
    opts = parser.parse_args()

    tempdir = opts.tempdir or tempfile.mkdtemp(prefix="tagdb.")
    print("Using tempdir: %s" % tempdir)

    start_time = datetime.now()
    dbo = get_dbo(tempdir, opts.source)

    DbSchema("./bdcs-tags.db").upgrade()

    tag_stats = create_sqlite_db(dbo, "./bdcs-tags.db")

    # Add in averages
    for t in tag_stats:
        if tag_stats[t]["count"] > 0:
            tag_stats[t]["average"] = tag_stats[t]["total"] / tag_stats[t]["count"]
        else:
            tag_stats[t]["average"] = 0.0

    print("RPM Tag Statistics: %d tags used" % len(tag_stats.keys()))
    pp = pprint.PrettyPrinter(indent=4)
    pp.pprint(tag_stats)


    print("\nTotal Tags used in repositories: %d" % sum(tag_stats[t]["count"] for t in tag_stats))
    print("\nTotal bytes used in RPM tags: %d" % sum(tag_stats[t]["total"] for t in tag_stats))

    unused_tags = set(TAG_TYPES.keys()) - set(["RPMTAG_"+t for t in tag_stats.keys()])
    print("\nUnused RPM Tags: %d" % len(unused_tags))
    pp.pprint(unused_tags)

    print("Remember to cleanup %s, or reuse it by passing --tempdir=%s" % (tempdir, tempdir))
    print("runtime = %s" % (datetime.now() - start_time))

